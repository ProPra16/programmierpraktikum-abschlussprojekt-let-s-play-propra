Klassenbeschreibung:

Inhalt:
Mit der Klasse Inhalt, wird ein Objekt Inhalt erzeugt. Dieses hat einen Namen und einen einen Text. 
Auf den Text und den Namen kann man einfach mit den "getter" Methoden getName getText zugreifen.

Aufgabe:
Mit der Klasse Aufgabe kann man ein Objekt Aufgabe erstellen. Eine Aufgabe beinhaltet immer einen Namen (als String), eine Beschreibung (auch als String), ein Inhaltsarray für Klassen und eines für Interfaces, außerdem ein Objekt Inhalt für Test und einen Boolean Babystep, welcher angibt ob die Aufgabe in Babystep gelöst werden soll. Auch in dieser Klasse kann man auf alle Inhalte einfach mit den entsprechenden "getter" Methoden zugreifen. Diese sind in diesem Fall: getName, getBeschreibung, getKlassen, getInterfaace, getTest, getValueBabystep.

XMLParser: 
Der XMLParser liest den im Programm ausgewählten Katalog ein und gibt am Ende ein Aufgabenarray zurück. Das Aufgabenarray bekommt man durch die Methode getAufgaben. Diese geht alle im Katalog gegeben Aufgaben durch und sucht sich von jeder einzelnen im Katalog festgelegten Aufgabe den Namen, die Beschreibung, alle Klassen (daher braucht man an dieser Stelle im Objekt Aufgabe auch ein Array), alle Interfaces (daher braucht man an dieser Stelle im Objekt Aufgabe auch ein Array), den Test und den Wert von Babystep heraus. Somit hat man am Ende der Methode alle Aufgaben aus dem entsprechenden Katalog in einem Array und kann dank Inhalt und Aufgabe jederzeit auf alles zugreifen, wodurch sich die jeweiligen Felder in der Benutzeroberfläche leicht ausfüllen lassen. 


Katalogbeschreibung:
Damit unser Programm ohne Probleme läuft sollte ein Katalog wie der mitgelieferte Katalog im Programm aussehen. Falls man einen neuen hinzufügen möchte oder einen eigenen von Anfanng an schreiben möchte hier einmal der Aufbau:  (vgl. Aufgabenstellungsbeispiel Projekt 7)
<exersices>
	<exercise Aufgabenname="hier den Namen eingeben">
	<description>Hier die Beschreibung
	</description>
	<classes>
		<class Klassenname="hier den Namen eingeben">
		hier das Klassengerüst 
		wichtig in der ersten Klasse muss die Main Methode zu finden sein
		(damit sie in TDDT im ersten Tab steht)
		</class>
		<class Klassenname="hier einen anderen Namen eingeben">
 		Klassengerüst
		</class>
	</classes>
	<interfaces>
		<interface name="hier den Namen eingeben">
		hier das Interfacegerüst
		</interface>
		<interface name="hier einen anderen  Namen eingeben">
		hier das Interfacegerüst
		</interface>
	</interfaces>
	<tests>
		<test Testname="hier den Namen eingeben">
		hier das Testgerüst
		</test>
	</tests>
	<config>
		<babystep value="hier kann true oder false stehen" />
	</config>
	</exercise>
<exercise Aufgabenname="hier einen anderen Namen eingeben">
	<description>Hier die Beschreibung
	</description>
	<classes>
		<class Klassenname="hier den Namen eingeben">
		hier das Klassengerüst 
		wichtig in der ersten Klasse muss die Main Methode zu finden sein
		(damit sie in TDDT im ersten Tab steht)
		</class>
		<class Klassenname="hier einen anderen Namen eingeben">
 		Klassengerüst
		</class>
	</classes>
	<tests>
		<test Testname="hier den Namen eingeben">
		hier das Testgerüst
		</test>
	</tests>
	<config>
		<babystep value="hier kann true oder false stehen" />
	</config>
	</exercise>
</exercises>

Dies ist ein Aufbau für einen Katalog mit zwei Aufgaben, wobei eine Aufgabe ein Interfacegerüst bekommt und die andere nicht. Ein Katalog kann natürlich beliebig viele Aufgaben beinhalten. Wichtig sind dabei nur folgende Punkte:

1. Eine Aufgabe hat immer einen Namen und Beschreibung, sprich Aufgabenstellung
2. Eine Aufgabe hat mindestens eine Klasse, kann aber beliebig viele Klassen haben. Eine Klasse hat einen Namen und am besten auch schon ein kleines Gerüst für den Anwender. Dabei ist zu beachten das jeweils die erste Klasse die Main-Methode enthält, damit sie beim benutzen von TDDT im ersten Tab landet.
3. Eine Aufgabe kann Interfaces haben, muss dies aber nicht. Falls eine Aufgabe ein Interface bekommen soll sollte dieses einen Namen haben.
4. Eine Aufgabe hat eine Testvorlage, damit der Anwender direkt einen fehlschlagenden Test schreiben kann. Allerdings hat eine Aufgabe auch nicht mehr als einen Test, da es Aufgabe vom Anwender ist tests zu schreiben, die dieser als sinnvoll erachtet.
5. Eine Aufgabe hat einen Babystepwert. Dies bedeutet das sich der ersteller des Katalogs darüber Gedanken machen muss ob eine Aufgabe in Babystep gelöst werden soll oder nicht wenn ja setzt man value="true" wenn nicht value = "false".

	


